local helper = require "render.render_helper"

local IDENTITY_MATRIX = vmath.matrix4()

function init(self)
  self.clear_color = vmath.vector4(0,0,0,1)
  self.clear_options = {
    [render.BUFFER_COLOR_BIT] = self.clear_color,
    [render.BUFFER_DEPTH_BIT] = 1,
    [render.BUFFER_STENCIL_BIT] = 0
  }

  self.scene = {
    predicate = render.predicate({ 'model' }),
    view = IDENTITY_MATRIX,
    projection = IDENTITY_MATRIX
  }

  self.gui = {
    predicate = render.predicate({ 'gui' }),
    view = IDENTITY_MATRIX
  }

  self.text = {
    predicate = render.predicate({ 'text' })
  }

  self.sky_pred = render.predicate({"sky"})
  self.quad_pred = render.predicate({"quad"})

  self.all_rt = helper.create_render_target("all")

end

function update(self)
  --update window dimensions
  window_width = render.get_window_width()
  window_height = render.get_window_height()

  -- recreate render targets
  self.all_rt = helper.create_render_target("all")

  -- render everything to rt
  helper.draw_to_rt(self.all_rt, function()

    render.clear(self.clear_options)
    render.set_viewport(0, 0, window_width, window_height)

    -- scene
    render.set_view(self.scene.view)
    render.set_projection(self.scene.projection)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_BLEND)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)

    local frustum = self.scene.projection * self.scene.view

    render.draw(self.sky_pred, {frustum = frustum})
    render.draw(self.scene.predicate, {frustum = frustum})

  end)

  -- render to quad
  render.set_view(IDENTITY_MATRIX)
  render.set_projection(IDENTITY_MATRIX)

  render.enable_material(hash("quad"))
    render.enable_texture(0, self.all_rt, render.BUFFER_COLOR0_BIT)

      render.clear(self.clear_options)

      render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
      render.enable_state(render.STATE_BLEND)
      render.enable_state(render.STATE_CULL_FACE)
      render.enable_state(render.STATE_DEPTH_TEST)
      render.set_depth_mask(true)
    
      render.draw(self.quad_pred, {})

    render.disable_texture(0)
  render.disable_material()

  -- debug
  render.disable_state(render.STATE_DEPTH_TEST)
  render.disable_state(render.STATE_CULL_FACE)
  render.draw_debug3d()

  -- gui
  render.set_view(self.gui.view)
  render.set_projection(vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1))
  render.enable_state(render.STATE_STENCIL_TEST)
  render.draw(self.gui.predicate)
  render.draw(self.text.predicate)
end

function on_message(self, message_id, message)
  if message_id == hash 'clear_color' then
    self.clear_color = message.color
  elseif message_id == hash 'set_view_projection' then
    self.scene.view = message.view
    self.scene.projection = message.projection
  end
end
