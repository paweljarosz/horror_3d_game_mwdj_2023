local helper = require "render.render_helper"
local light_and_shadows = require "light_and_shadows.light_and_shadows"

local IDENTITY_MATRIX = vmath.matrix4()
local quad_postprocessing_material = hash("quad")

function init(self)
	self.constants = render.constant_buffer()
	--self.shadow_pred = render.predicate({"shadow", "model", "quad"}) -- all objects that have to cast shadows
	--light_and_shadows.init(self)


	self.clear_color = vmath.vector4(0,0,0,1)
	self.clear_options = {
		[render.BUFFER_COLOR_BIT] = self.clear_color,
		[render.BUFFER_DEPTH_BIT] = 1,
		[render.BUFFER_STENCIL_BIT] = 0
	}

	self.scene = {
		predicate = render.predicate({ 'model' }),
		view = IDENTITY_MATRIX,
		projection = IDENTITY_MATRIX
	}

	self.gui = {
		predicate = render.predicate({ 'gui' }),
		view = IDENTITY_MATRIX
	}

	self.text = {
		predicate = render.predicate({ 'text' })
	}

	self.sky_pred = render.predicate({"sky"})
	self.quad_pred = render.predicate({"quad"})

	self.all_rt = helper.create_render_target("all")

	-- shadows (NOT WORKING)
	--[[self.light_rt				= helper.create_depth_buffer(2048,2048)
	self.light_transform		= vmath.matrix4()
	self.light_projection		= vmath.matrix4()
	self.light_constant_buffer	= render.constant_buffer()

	self.bias_matrix    = vmath.matrix4()
	self.bias_matrix.c0 = vmath.vector4(0.5, 0.0, 0.0, 0.0)
	self.bias_matrix.c1 = vmath.vector4(0.0, 0.5, 0.0, 0.0)
	self.bias_matrix.c2 = vmath.vector4(0.0, 0.0, 0.5, 0.0)
	self.bias_matrix.c3 = vmath.vector4(0.5, 0.5, 0.5, 1.0)]]

	self.window_width = 0
	self.window_height = 0
end

function update(self)
	--update window dimensions
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()

	-- recreate render targets (in case of window change)
	if (window_width ~= self.window_width)
	or (window_height ~= self.window_height) then
		self.window_width = window_width
		self.window_height = window_height
		render.delete_render_target(self.all_rt)
		self.all_rt = helper.create_render_target("all")
	end

	-- scene
	helper.draw_to_render_target(self.all_rt, function()
		render.enable_material(hash("illumination"))
		render.clear(self.clear_options)

		render.set_viewport(0, 0, window_width, window_height)
		render.set_view(self.scene.view)
		render.set_projection(self.scene.projection)
		helper.set_default_state()
		local frustum = self.scene.view * self.scene.projection

		render.draw(self.sky_pred, {frustum = frustum})
		render.draw(self.scene.predicate)--, {frustum = frustum})

		render.disable_material(hash("illumination"))
	end)

	-- postprocessing
	helper.draw_to_quad_for_fullscreen_postprocessing(quad_postprocessing_material, function()
		render.clear(self.clear_options)

		render.set_view(IDENTITY_MATRIX)
		render.set_projection(IDENTITY_MATRIX)
		helper.set_default_state()
		local frustum = IDENTITY_MATRIX * IDENTITY_MATRIX

		render.draw(self.quad_pred, {frustum = frustum})
	end, self.all_rt)

	-- debug
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.draw_debug3d()

	-- gui
	render.set_view(self.gui.view)
	render.set_projection(vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1))
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui.predicate)
	render.draw(self.text.predicate)
end

function on_message(self, message_id, message)
	if message_id == hash 'clear_color' then
		self.clear_color = message.color
	elseif message_id == hash 'set_view_projection' then
		self.scene.view = message.view
		self.scene.projection = message.projection
	end
end
