--
-- Local

local pigeon = require "pigeon.pigeon"

local spectator_mode = false
local is_flashlight_on = true

local urls = { }

local function handle_window_event(self, event, data)
  if event == window.WINDOW_EVENT_FOCUS_LOST then
    msg.post(urls.walker, hash 'pause', { is_paused = true })
  elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
    msg.post(urls.walker, hash 'pause', { is_paused = false })
  end
end

--
-- Lifecycle

local max_battery_life = 99

function init(self)
  urls.eyes = msg.url('eyes')
  urls.operator = msg.url('operator/operator')
  urls.walker = msg.url('#walker')
  urls.flashlight = msg.url('flashlight')
  urls.flashlight_script = msg.url('flashlight#light')
  urls.camera = msg.url('operator/camera')

  msg.post('.', hash 'acquire_input_focus')
  msg.post(urls.operator, hash 'follow_point', { object = urls.eyes })
  msg.post(urls.walker, hash 'follow_camera', { camera = urls.operator })

  go.set_parent(urls.flashlight, urls.camera, true)
  
  window.set_listener(handle_window_event)

  self.battery_life = max_battery_life
  self.max_brightness = 1
  self.batter_timer = timer.delay(5, true, function()
    self.battery_life = self.battery_life - 1
    pigeon.send("flashlight", {battery_life = self.battery_life})
    self.max_brightness = self.battery_life / max_battery_life
    go.set(urls.flashlight_script, 'brightness', is_flashlight_on and self.max_brightness or 0)
  end)

  pigeon.toggle_logging(false)

  sound.play("#haunting")
end

function on_input(self, action_id, action)
  if action_id == hash 'key_e' and action.released then
    --spectator_mode = not spectator_mode
    --msg.post(urls.walker, hash 'spectator_mode', { is_enabled = spectator_mode } )
    -- TODO: Interaction handling
  elseif action_id == hash 'key_f' and action.released then
    is_flashlight_on = not is_flashlight_on
    go.set(urls.flashlight_script, 'brightness', is_flashlight_on and self.max_brightness or 0)
    pigeon.send("flashlight", {battery_life = self.battery_life})
    if is_flashlight_on then
      self.batter_timer = timer.delay(5, true, function()
        self.battery_life = self.battery_life - 1
        pigeon.send("flashlight", {battery_life = self.battery_life})
        self.max_brightness = self.battery_life / max_battery_life
        go.set(urls.flashlight_script, 'brightness', is_flashlight_on and self.max_brightness or 0)
      end)
    elseif self.batter_timer then
      timer.cancel(self.batter_timer)
    end
  end
end

local function dist2d(x1, y1, x2, y2)
  return ((x2-x1)^2+(y2-y1)^2)^0.5
end

function on_message(self, message_id, message, sender)
  if message_id == hash("trigger_response") then
    if sender == msg.url("main:/player/player#fov") then
      local pos = go.get_world_position()
      local other_pos = go.get_world_position(message.other_id)
      local dist = dist2d(pos.x, pos.z, other_pos.x, other_pos.z)
      pigeon.send("zombie_fov", {distance = dist, enter = message.enter})
    else
      pigeon.send("paper", {enter = message.enter, paper_id = message.other_id})
    end
  end
end