--local illumination = require 'illumination.illumination'
local pigeon = require "pigeon.pigeon"

local msg_paper = hash("paper")
local msg_flashlight = hash("flashlight")
local msg_loudness = hash("loudness")
local msg_scaring = hash("scaring")
local msg_zombie_pov = hash("zombie_fov")
local msg_rotation = hash("rotation")
local msg_paper_no = hash("paper_no")
local msg_respawn = hash("respawn")

local key_interact = hash('key_e')
local key_ui = hash('key_h')
local key_scarejumps = hash('key_n')
local key_1 = hash('key_1')
local key_2 = hash('key_2')

local gathered_pages = 0

--
-- Lifecycle

function init(self)
  self.scary_node = gui.get_node('scary')
  gui.set_enabled(self.scary_node, false)

  msg.post('.', hash 'acquire_input_focus')
  self.root_node = gui.get_node('root')
  self.interact_node = gui.get_node('interact')
  self.page_node = gui.get_node('page')
  self.loudness_node = gui.get_node('loudness')
  self.pages_node = gui.get_node('pages')
  self.scarejump_text = gui.get_node('scarejumps')
  self.compass_node = gui.get_node('compass')
  self.battery_node = gui.get_node('battery')

  pigeon.subscribe({msg_paper, msg_flashlight, msg_loudness, msg_scaring,
  msg_zombie_pov, msg_rotation, msg_paper_no})


  self.is_enabled = true
  self.is_profiler_enabled = false
  self.scarejumps_enabled = true
  self.scarejump_time = 0.1
  self.scarejump_timer = nil
  self.loudness = 0

  self.interaction = false
  gui.set_enabled(self.interact_node, self.interaction)
  gui.set_enabled(self.page_node, self.interaction)
  self.ui_visible = true

  self.battery_life = 99
  self.papers_to_collect = 6
  gui.set_text(self.pages_node, self.papers_to_collect)
end

local function animate_paper_to_player(self)
  gui.set_enabled(self.page_node, self.interaction)
  self.interaction = false
  gui.set_text(self.interact_node, "[E] - Hide")
  sound.play("main:/player/player#paper")
  gui.set_position(self.page_node, vmath.vector3(640,370,0))
  gui.animate(self.page_node, gui.PROP_POSITION, vmath.vector3(640,370,0), gui.EASING_INSINE, 0, 0, function()
    gui.set_scale(self.page_node, vmath.vector3(0.2))
    gui.animate(self.page_node, gui.PROP_SCALE, vmath.vector3(0.7), gui.EASING_INSINE, 0.3)
  end)
end

local function animate_paper_to_inventory(self)
  gui.set_enabled(self.interact_node, self.interaction)
  gui.set_text(self.interact_node, "[E] - Collect")
  gui.animate(self.page_node, gui.PROP_SCALE, vmath.vector3(0), gui.EASING_INSINE, 0.4, 0, function()
    gui.set_enabled(self.page_node, self.interaction)
    gui.animate(self.pages_node, gui.PROP_SCALE, vmath.vector3(1.3), gui.EASING_INSINE, 0.2, 0, function()
      gui.set_text(self.pages_node, self.papers_to_collect)
      gui.animate(self.pages_node, gui.PROP_SCALE, vmath.vector3(1), gui.EASING_OUTSINE, 0.2)
    end)
  end)
  gui.set_position(self.page_node, vmath.vector3(640,370,0))
  gui.animate(self.page_node, gui.PROP_POSITION, vmath.vector3(60,680,0), gui.EASING_INSINE, 0.35)
end

function on_input(self, action_id, action)
  if action_id == key_ui and action.released then
    self.ui_visible = not self.ui_visible
    gui.set_enabled(self.root_node, self.ui_visible)

  elseif action_id == key_interact and action.released then

    if self.interaction then
      gathered_pages = gathered_pages + 1
      pigeon.send("remove_paper", { paper_id = self.paper_id })
    else
      self.papers_to_collect = self.papers_to_collect - 1
      if self.papers_to_collect <= 0 then
        self.papers_to_collect = 6
        pigeon.send("respawn")
      end
      animate_paper_to_inventory(self)
    end

  elseif action_id == key_scarejumps and action.released then
    self.scarejumps_enabled = not self.scarejumps_enabled
    gui.set_text(self.scarejump_text, "[N] - "..(self.scarejumps_enabled and "disable scarejumps" or "enable scarejumps"))
    gui.play_flipbook(self.scary_node, self.scarejumps_enabled and "scary" or "not-scary")
    self.scarejump_time = self.scarejumps_enabled and 0.1 or 0.25
  elseif action_id == key_1 and action.released then
    pigeon.send("adjust_brightness", {delta = -0.05})
  elseif action_id == key_2 and action.released then
    pigeon.send("adjust_brightness", {delta = 0.05})
  end
end

local function scare(self)
  gui.set_enabled(self.scary_node, true)
  gui.animate(self.scary_node, gui.PROP_COLOR, vmath.vector4(0), gui.EASING_INOUTSINE, 0, 0, function()
    gui.animate(self.scary_node, gui.PROP_COLOR, vmath.vector4(1), gui.EASING_INOUTSINE, self.scarejump_time * 0.5)
  end)
  timer.delay(self.scarejump_time, false, function()
    gui.set_enabled(self.scary_node, false)
  end)
end

function on_message(self, message_id, message, sender)
  if message_id == msg_rotation then
    gui.set_rotation(self.compass_node, vmath.quat_rotation_z(-message.angle))
  elseif message_id == msg_paper then
    self.interaction = message.enter
    self.paper_id = message.paper_id
    gui.set_enabled(self.interact_node, self.interaction)
  elseif message_id == msg_flashlight then
    self.battery_life = message.battery_life
    gui.set_text(self.battery_node, self.battery_life)
  elseif (message_id == msg_loudness) and (message.loudness ~= self.loudness) then
    self.loudness = message.loudness
    gui.play_flipbook(self.loudness_node, "loudness_"..message.loudness)
  elseif message_id == msg_scaring then
    gui.set_enabled(self.scary_node, true)
    gui.animate(self.scary_node, gui.PROP_COLOR, vmath.vector4(0), gui.EASING_INOUTSINE, 0, 0, function()
      gui.animate(self.scary_node, gui.PROP_COLOR, vmath.vector4(1), gui.EASING_INOUTSINE, self.scarejump_time * 0.5)
    end)
    timer.delay(self.scarejump_time, false, function()
      gui.set_enabled(self.scary_node, false)
    end)
  elseif message_id == msg_zombie_pov then
    if message.enter then
      self.scarejump_timer = timer.delay(8, false, function()
        scare(self)
      end)
    else
      timer.cancel(self.scarejump_timer)
    end
  elseif message_id == msg_paper_no then
    gui.play_flipbook(self.page_node, "paper_"..message.paper_no)
    animate_paper_to_player(self)
  elseif message_id == msg_respawn then
    self.battery_life = 99
    self.papers_to_collect = 6
    gui.set_text(self.pages_node, self.papers_to_collect)
    gui.set_text(self.battery_node, self.battery_life)
  end
end