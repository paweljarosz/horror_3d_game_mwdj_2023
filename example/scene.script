local illumination = require "illumination.illumination"

--
-- Local

local urls = { }

local daycycle = {
  {
    sunlight_direction = vmath.vector3(-70, 90, 0),
    sunlight_color = vmath.vector3(1, 1, 1),
    sunlight_brightness = 1,
    ambient_color = vmath.vector3(1, 1, 1),
    ambient_level = 0.3,
    fog_color = vmath.vector3(0.73, 0.8, 0.92),
    duration = 0
  },
  {
    sunlight_direction = vmath.vector3(0, 20, 0),
    sunlight_color = vmath.vector3(0.218, 0.261, 0.613),
    sunlight_brightness = 0.1,
    ambient_color = vmath.vector3(0.218, 0.261, 0.613),
    ambient_level = 0.15,
    fog_color = vmath.vector3(0, 0, 0.1),
    duration = 0
  }
}

local spawn = {
  {
    factory = "#tree1", -- lowpoly, few branches
    pos = {vmath.vector3(-1,0,0),   vmath.vector3(3,0,2)},
    rot = {vmath.quat_rotation_y(0), vmath.quat_rotation_y(30)},
    scale = {vmath.vector3(0.5), vmath.vector3(0.8)}
  },
  {
    factory = "#tree2",  -- HD twisted tree
    pos = {vmath.vector3(-6,0.05,1)},
    rot = {vmath.quat_rotation_y(50)},
    scale = {vmath.vector3(1.8)}
  },
  --[[{
    factory = "#tree3",  -- lowpoly, lot of branches
    pos = {vmath.vector3(-3,-0.4,3),   vmath.vector3(6,-0.2,4)},
    rot = {vmath.quat_rotation_y(50), vmath.quat_rotation_y(0)},
    scale = {vmath.vector3(0.6), vmath.vector3(0.7)}
  },
  {
    factory = "#tree4",  -- lot of branches
    pos = {vmath.vector3(3,-0.5,8),   vmath.vector3(-7,-0.1,3)},
    rot = {vmath.quat_rotation_y(50), vmath.quat_rotation_y(0)},
    scale = {vmath.vector3(0.6), vmath.vector3(0.7)}
  },]]
  {
    factory = "#zombie",
    pos = {vmath.vector3(-6,0,0)},
    rot = {vmath.quat_rotation_y(0)},
    scale = {vmath.vector3(1)}
  }--]]
}

local function run_daycycle(self, index)
  local target = daycycle[index or 1]
  local duration = index and target.duration or 0
  --local index = index or 1
  
  --go.animate(urls.illumination_go, 'euler', go.PLAYBACK_ONCE_FORWARD, target.sunlight_direction, go.EASING_LINEAR, duration, 0, function()
    --run_daycycle(self, index == #daycycle and 1 or (index + 1))
  --end)

  go.cancel_animations(urls.illumination)
  
  go.animate(urls.illumination, 'sunlight_color', go.PLAYBACK_ONCE_FORWARD, target.sunlight_color, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'sunlight_brightness', go.PLAYBACK_ONCE_FORWARD, target.sunlight_brightness, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'ambient_color', go.PLAYBACK_ONCE_FORWARD, target.ambient_color, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'ambient_level', go.PLAYBACK_ONCE_FORWARD, target.ambient_level, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'fog_color', go.PLAYBACK_ONCE_FORWARD, target.fog_color, go.EASING_LINEAR, duration)
end

-- Distance between two 2d points
local function dist2d(x1, y1, x2, y2)
  return ((x2-x1)^2+(y2-y1)^2)^0.5 -- removed sqr on purpose
end

local grass_scale = 1
local grass_space = 2
local grass_fov = 12
local remove_grass_fov = 16

local function recreate_grass(self)
  local hero_x = math.floor(self.pos.x)
  local hero_z = math.floor(self.pos.z)
  hero_x = hero_x - (hero_x % grass_space)
  hero_z = hero_z - (hero_z % grass_space)

  -- Remove far grass
  for obj_x,z_column in pairs(self.spawned_grass) do
    for obj_z, obj_id in pairs(z_column) do
      if dist2d(hero_x, hero_z, obj_x, obj_z) > remove_grass_fov then
        --print("Remove ", obj_id, "at", obj_x, obj_z)
        go.delete(obj_id)
        self.spawned_grass[obj_x][obj_z] = nil
      end
    end
  end

  -- Create near grass
  for x = -grass_fov, grass_fov, grass_space do
    for z = -grass_fov, grass_fov, grass_space do
      local grid = vmath.vector3(hero_x + x, 0, hero_z + z)
      local pos = vmath.vector3(hero_x + x, 0, hero_z + z)
      self.spawned_grass[grid.x] = self.spawned_grass[grid.x] or {}
      if not self.spawned_grass[grid.x][grid.z] then
        --print("Create ", grid.x, grid.z, "at", pos.x, pos.z)
        self.spawned_grass[grid.x][grid.z] = factory.create("#grass", pos, _, _, grass_scale)
      end
    end
  end
end

--
-- Lifecycle

function init(self)
  self.spawned = {}
  self.spawned_grass = {}
  self.pos = go.get_world_position("main:/player/player")

  recreate_grass(self)
  timer.delay(0.5, true, function()
    self.pos = go.get_world_position("main:/player/player")
    recreate_grass(self)
  end)


  self.spawned = {}
  for i,obj in ipairs(spawn) do
    for j,pos in ipairs(obj.pos) do
      self.spawned[i] = factory.create(obj.factory, pos, obj.rot[j], _, obj.scale[j])
    end
  end
  urls = {
    illumination_go = msg.url('illumination'),
    illumination = msg.url('illumination#illumination'),
    firefly = msg.url('firefly'),
    firefly_light = msg.url('firefly#light'),
    fireplace = msg.url('fireplace#light'),
    spot_red = msg.url('light_red'),
    spot_green = msg.url('light_green')
  }

  run_daycycle(self, 2)

--[[  go.animate(urls.spot_red, 'euler.y', go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 10, 0)
  go.animate(urls.spot_red, 'euler.z', go.PLAYBACK_LOOP_PINGPONG, -50, go.EASING_INOUTQUAD, 5, 0)
  go.animate(urls.spot_green, 'euler.y', go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 12, 0)
  go.animate(urls.spot_green, 'euler.z', go.PLAYBACK_LOOP_PINGPONG, -50, go.EASING_INOUTQUAD, 5, 0)
  go.animate(urls.fireplace, 'brightness', go.PLAYBACK_LOOP_PINGPONG, 0.8, go.EASING_INOUTQUAD, 1, 0)  
  go.animate(urls.firefly, 'position', go.PLAYBACK_LOOP_PINGPONG, vmath.vector3(-6, 1, -4), go.EASING_INOUTQUAD, 25, 0)]]

  --illumination.set_debug(true)
end