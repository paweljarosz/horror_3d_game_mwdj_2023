--
-- Local

local pigeon = require "pigeon.pigeon"

local urls = { }

local daycycle = {
  {
    sunlight_direction = vmath.vector3(-70, 90, 0),
    sunlight_color = vmath.vector3(0.5, 0.5, 0.5),
    sunlight_brightness = 0.5,
    ambient_color = vmath.vector3(0.5, 0.5, 0.5),
    ambient_level = 0.3,
    fog_color = vmath.vector3(0),
    fog_level = 0.3,
    fog_distance_min = 6,
    fog_distance_max = 8,
    duration = 0
  },
  {
    sunlight_direction = vmath.vector3(-70, 80, 0),
    sunlight_color = vmath.vector3(0.3, 0.3, 0.9),
    sunlight_brightness = 0.6,
    ambient_color = vmath.vector3(0.2, 0.2, 0.6),
    ambient_level = 0.3,
    fog_color = vmath.vector3(0),
    fog_level = 0.9,
    fog_distance_min = 9,
    fog_distance_max = 15,
    duration = 0
  }
}

local function run_daycycle(self, index)
  local target = daycycle[index or 1]
  local duration = index and target.duration or 0

  go.cancel_animations(urls.illumination)
  go.animate(urls.illumination, 'sunlight_color', go.PLAYBACK_ONCE_FORWARD, target.sunlight_color, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'sunlight_brightness', go.PLAYBACK_ONCE_FORWARD, target.sunlight_brightness, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'ambient_color', go.PLAYBACK_ONCE_FORWARD, target.ambient_color, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'ambient_level', go.PLAYBACK_ONCE_FORWARD, target.ambient_level, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'fog_level', go.PLAYBACK_ONCE_FORWARD, target.fog_level, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'fog_color', go.PLAYBACK_ONCE_FORWARD, target.fog_color, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'fog_distance_min', go.PLAYBACK_ONCE_FORWARD, target.fog_distance_min, go.EASING_LINEAR, duration)
  go.animate(urls.illumination, 'fog_distance_max', go.PLAYBACK_ONCE_FORWARD, target.fog_distance_max, go.EASING_LINEAR, duration)
end

-- Distance between two 2d points
local function dist2d(x1, y1, x2, y2)
  return ((x2-x1)^2+(y2-y1)^2)^0.5 -- removed sqr on purpose
end

local grass_scale = 2
local grass_space = 4
local grass_fov = 16
local remove_grass_fov = 20

local tree_density = 15
local tree_1_probability = 100 - tree_density
local tree_2_probability = 100 - 2 * tree_density
local tree_3_probability = 100 - 3 * tree_density
local tree_4_probability = 100 - 4 * tree_density
--local candle_probability = 100 - 4.5 * tree_density

local function get_normalized_hero_position()
  local hero_pos = go.get_world_position("main:/player/player")
  hero_pos.x = math.floor(hero_pos.x)
  hero_pos.z = math.ceil(hero_pos.z)
  hero_pos.x = hero_pos.x - (hero_pos.x % grass_space)
  hero_pos.z = hero_pos.z - (hero_pos.z % grass_space)
  return hero_pos
end

local instance_counter = 0

local function remove_far_grass_and_trees(spawned_objects, hero_pos)
  for obj_x, z_column in pairs(spawned_objects) do
    for obj_z, objects in pairs(z_column) do
      if dist2d(hero_pos.x, hero_pos.z, obj_x, obj_z) > remove_grass_fov then
        -- Eventually remove far grass
        if objects.grass and go.exists(objects.grass) then
          go.delete(objects.grass)
          instance_counter = instance_counter - 1
        end

        -- Eventually remove trees
        if objects.tree and go.exists(objects.tree) then
          go.delete(objects.tree)
          instance_counter = instance_counter - 1
        end

        -- Eventually remove papers
        if objects.paper and go.exists(objects.paper) then
          go.delete(objects.paper)
          instance_counter = instance_counter - 1
        end

        -- Eventually remove lights
        if objects.light and go.exists(objects.light) then
          go.delete(objects.light)
          instance_counter = instance_counter - 1
        end
        spawned_objects[obj_x][obj_z] = nil
      end
    end
  end
end

local papers = {}
papers[1] = {
  grid = {x = 0, z = 0},
  paper_model = "#paper1",
  paper_delta = vmath.vector3(0.0, 1.25, 0.24),
  paper_scale = vmath.vector3(0.2),
  paper_rot = vmath.quat_rotation_y(0),
  taken = false,
  model = "#crossstone",
  model_scale = vmath.vector3(0.12),
  light_delta = vmath.vector3(0.7, 1.14, 0.3),
  light_color = vmath.vector3(1,0,0),
  collected = false
}

papers[2] = {
  grid = {x = 32, z = 0},
  paper_model = "#paper2",
  paper_delta = vmath.vector3(0.05, 1.24, 0.42),
  paper_scale = vmath.vector3(0.18),
  paper_rot = vmath.quat_rotation_x(0.36),
  taken = false,
  model = "#tree1",
  model_scale = vmath.vector3(1),
  collected = false
}

papers[3] = {
  grid = {x = 0, z = -16},
  paper_model = "#paper3",
  paper_delta = vmath.vector3(0.7, 0.01, 0.6),
  paper_scale = vmath.vector3(0.25),
  paper_rot = vmath.quat_rotation_x(-1.57),
  taken = false,
  model = "#candle",
  model_scale = vmath.vector3(0.12),
  light_delta = vmath.vector3(0.7, 1.14, 0.3),
  light_color = vmath.vector3(1,0,0),
  collected = false
}


papers[4] = {
  grid = {x = -24, z = 0},
  paper_model = "#paper4",
  paper_delta = vmath.vector3(-0.05, 0.01, -0.1),
  paper_scale = vmath.vector3(0.25),
  paper_rot = vmath.quat_rotation_x(-1.57),
  taken = false,
  model = "#hand",
  model_scale = vmath.vector3(0.12),
  light_delta = vmath.vector3(0.7, 1.14, 0.3),
  light_color = vmath.vector3(1,0,0),
  collected = false
}

papers[5] = {
  grid = {x = 0, z = 20},
  paper_model = "#paper5",
  paper_delta = vmath.vector3(0.617, 1.9, 0.05),
  paper_scale = vmath.vector3(0.2),
  paper_rot = vmath.quat_rotation_y(1.57),
  taken = false,
  model = "#tombstone",
  model_scale = vmath.vector3(0.4),
  light_delta = vmath.vector3(0.7, 1.14, 0.3),
  light_color = vmath.vector3(1,0,0),
  collected = false
}

papers[6] = {
  grid = {x = -24, z = 24},
  paper_model = "#paper6",
  paper_delta = vmath.vector3(-0.61, 0.7, 0.0),
  paper_scale = vmath.vector3(0.23),
  paper_rot = vmath.quat_rotation_y(-1.57),
  taken = false,
  model = "#door",
  model_scale = vmath.vector3(1.0),
  light_delta = vmath.vector3(0.7, 1.14, 0.3),
  light_color = vmath.vector3(1,0,0),
  collected = false
}

local spawned_papers_locations = {}

local function create_near_grass_and_trees(spawned_objects, hero_pos)
  for x = -grass_fov, grass_fov, grass_space do
    for z = -grass_fov, grass_fov, grass_space do
      local grid = vmath.vector3(hero_pos.x + x, 0, hero_pos.z + z)
      local pos = vmath.vector3(hero_pos.x + x, 0, hero_pos.z + z)
      if (grid.x < 53) and (grid.x > -53) and (grid.z < 53) and (grid.z > -53) then
        if not spawned_objects[grid.x] then
          spawned_objects[grid.x] = {}
        end
        if not spawned_objects[grid.x][grid.z] then
          -- Create near grass
          spawned_objects[grid.x][grid.z] = spawned_objects[grid.x][grid.z] or {}

          -- Spawn papers
          for i,v in pairs(papers) do
            if v.grid.x == grid.x and v.grid.z == grid.z then
              if not spawned_objects[grid.x][grid.z].grass then
                spawned_objects[grid.x][grid.z].grass = factory.create("#grass", pos, _, _, grass_scale)
                instance_counter = instance_counter + 1
              end
              if not spawned_objects[grid.x][grid.z].tree then
                spawned_objects[grid.x][grid.z].tree = factory.create(v.model, pos, _, _, v.model_scale)
                instance_counter = instance_counter + 1
              end
              if (not v.collected) and (not spawned_objects[grid.x][grid.z].paper) then
                spawned_objects[grid.x][grid.z].paper = factory.create(v.paper_model, pos + v.paper_delta, v.paper_rot, _, v.paper_scale)
                instance_counter = instance_counter + 1
                spawned_papers_locations[spawned_objects[grid.x][grid.z].paper] = {x = grid.x, z = grid.z, papers_index = i}
              end
              if v.light_delta and (not spawned_objects[grid.x][grid.z].light) then
                spawned_objects[grid.x][grid.z].light = factory.create("#light", pos + v.light_delta, _,
                {specular = 1, smoothness = 0.5, cutoff = 0.5, color = v.light_color})
                instance_counter = instance_counter + 1
              end
            end
          end

          if not spawned_objects[grid.x][grid.z].grass then
            spawned_objects[grid.x][grid.z].grass = factory.create("#grass", pos, _, _, grass_scale)
            instance_counter = instance_counter + 1
          end

          -- Walls
          -- North
          if grid.z == -52 then
            local rot = vmath.quat_rotation_y(0)
            spawned_objects[grid.x][grid.z].tree = factory.create("#wall", pos, rot, _, grass_scale)
            instance_counter = instance_counter + 1
          end

          --South
          if grid.z == 52 then
            local rot = vmath.quat_rotation_y(3.14)
            spawned_objects[grid.x][grid.z].tree = factory.create("#wall", pos, rot, _, grass_scale)
            instance_counter = instance_counter + 1
          end

          --West
          if grid.x == 52 then
            local rot = vmath.quat_rotation_y(-1.57)
            spawned_objects[grid.x][grid.z].tree = factory.create("#wall", pos, rot, _, grass_scale)
            instance_counter = instance_counter + 1
          end

          --East
          if grid.x == -52 then
            local rot = vmath.quat_rotation_y(1.57)
            spawned_objects[grid.x][grid.z].tree = factory.create("#wall", pos, rot, _, grass_scale)
            instance_counter = instance_counter + 1
          end

          -- Create near trees
          if not spawned_objects[grid.x][grid.z].tree then
            local random_num = math.random(0,100)
            local random_scale = vmath.vector3(1+(math.random(1,4)/10))
            if random_num > tree_1_probability then
              spawned_objects[grid.x][grid.z].tree = factory.create("#tree1", pos, _, _, random_scale/1.2)
              instance_counter = instance_counter + 1
            elseif random_num > tree_2_probability then
              spawned_objects[grid.x][grid.z].tree = factory.create("#tree2", pos, _, _, random_scale/11)
              instance_counter = instance_counter + 1
            elseif random_num > tree_3_probability then
              spawned_objects[grid.x][grid.z].tree = factory.create("#tree3", pos, _, _, random_scale/3)
              instance_counter = instance_counter + 1
            elseif random_num > tree_4_probability then
              spawned_objects[grid.x][grid.z].tree = factory.create("#tree4", pos, _, _, random_scale)
              instance_counter = instance_counter + 1
            end
          end
        end
      end
    end
  end
  --print("Instances", instance_counter)
end

local function recreate_world_around_player(spawned_objects)
  local hero_pos = get_normalized_hero_position()

  remove_far_grass_and_trees(spawned_objects, hero_pos)

  create_near_grass_and_trees(spawned_objects, hero_pos)
end

local spawned_zombie = false
local max_spawns = 10
local times_spawned = 0

local function clamp(x, min, max)
  if x > max then x = max
  elseif x < min then x = min
  end
  return x
end

local function spawn_zombie(spawned_objects, did_scared)
  local hero_pos = get_normalized_hero_position()
  times_spawned = times_spawned + 1
  if did_scared then times_spawned = max_spawns end
  local sign_x = math.random(0,1) == 0 and -1 or 1
  local sign_y = math.random(0,1) == 0 and -1 or 1
  local range_min = 5+(max_spawns-times_spawned)
  local range_max = 10+(max_spawns-times_spawned)
  local grid_x = hero_pos.x + sign_x * math.random(range_min, range_max)
  local grid_z = hero_pos.z + sign_y * math.random(range_min, range_max)
  grid_x = clamp(grid_x, -48, 48)
  grid_z = clamp(grid_z, -48, 48)
  local pos = vmath.vector3(grid_x+0.5, 0, grid_z+0.5)
  if not spawned_zombie then
    spawned_zombie = {}
    print("Zombie at", grid_x, grid_z, spawned_objects[grid_x])
    spawned_zombie.id = factory.create("#zombie", pos, _, _, vmath.vector3(0.4))
    spawned_zombie.x = grid_x
    spawned_zombie.z = grid_z
  end
end

local msg_remove_paper = hash("remove_paper")
local msg_brightness = hash("adjust_brightness")
local msg_zombie_pov = hash("zombie_fov")
local msg_zombie_change_pos = hash("zombie_change_pos")
 
--
-- Lifecycle

local function respawn_world(self)
  for i,v in pairs(papers) do
    v.collected = false
  end
  self.spawned_objects = {}
  go.set_position(vmath.vector3(0,0,3), "main:/player/player")
  go.set_rotation(vmath.quat_rotation_y(0), "main:/player/player")
  self.pos = go.get_world_position("main:/player/player")

  if self.recreation_timer then timer.cancel(self.recreation_timer) end
  if self.zombie_spawn_timer then timer.cancel(self.zombie_spawn_timer) end

  recreate_world_around_player(self.spawned_objects)
  self.recreation_timer = timer.delay(0.2, true, function()
    recreate_world_around_player(self.spawned_objects)
  end)

  spawn_zombie(self.spawned_objects)

  self.zombie_spawn_timer = timer.delay(12, true, function()
    pigeon.send("zombie_change_pos")
  end)

  pigeon.send("respawn")
end


function init(self)
  print("I", socket.gettime()*10000)
  math.randomseed(socket.gettime()*10000) --3
  math.random()
  math.random()
  math.random()

  respawn_world(self)

  urls = {
    illumination_go = msg.url('illumination'),
    illumination = msg.url('illumination#illumination'),
    firefly = msg.url('firefly'),
    firefly_light = msg.url('firefly#light'),
    fireplace = msg.url('fireplace#light'),
    spot_red = msg.url('light_red'),
    spot_green = msg.url('light_green')
  }

  run_daycycle(self, 2)

  pigeon.subscribe({msg_remove_paper, msg_brightness, msg_zombie_pov, msg_zombie_change_pos})
end

local function remove_paper(object)
  -- Eventually remove papers
  if object.paper then
    go.delete(object.paper)
    instance_counter = instance_counter - 1
  end
end

local function angle_of_vector_between_two_points(x1,y1, x2,y2)
  return math.atan2(y2-y1, x2-x1)
end

local zombie_spawned_times = 0

function on_message(self, message_id, message, sender)
  if (message_id == msg_remove_paper) and message.paper_id then
    local paper = spawned_papers_locations[message.paper_id]
    remove_paper(self.spawned_objects[paper.x][paper.z])
    papers[paper.papers_index].collected = true
    spawned_papers_locations[message.paper_id] = nil
    pigeon.send("paper_no", {paper_no = paper.papers_index})
  elseif (message_id == msg_brightness) then
    daycycle[2].sunlight_brightness = daycycle[2].sunlight_brightness + message.delta
    daycycle[2].ambient_level = daycycle[2].ambient_level + message.delta
    daycycle[2].sunlight_brightness = clamp(daycycle[2].sunlight_brightness, 0.3, 1)
    daycycle[2].ambient_level = clamp(daycycle[2].ambient_level, 0.00, 0.7)
    run_daycycle(self, 2)
  elseif (message_id == msg_zombie_pov) then
    if message.enter and spawned_zombie then
      go.get_world_position(spawned_zombie.id)
      local zombie_pos = go.get_world_position(spawned_zombie.id)
      local hero_pos = go.get_world_position("main:/player/player")
      local v2 = vmath.vector3(zombie_pos.x - hero_pos.x, 0, zombie_pos.z - hero_pos.z)
      v2 = vmath.normalize(v2)
      local angle = angle_of_vector_between_two_points(0, 0, v2.x, v2.z)
      --local rot = vmath.quat_from_to(v1, v2)
      local rot2 = vmath.quat_rotation_y(-angle + 1.57)
      go.set(spawned_zombie.id, "rotation", rot2)
      zombie_spawned_times = zombie_spawned_times + 1
      if zombie_spawned_times > 10 then
        zombie_spawned_times = 0
        respawn_world(self)
      end
    end
  elseif (message_id == msg_zombie_change_pos) then
    print("Change_pos")
    if spawned_zombie.id then
      go.delete(spawned_zombie.id)
      spawned_zombie = false
    end
    spawn_zombie(self.spawned_objects, message.scared)
  end
end